# -*- coding: utf-8 -*-
"""introduction_of_rag-f8f0b71eb5ffece93efa3182a060ba49.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1903TZYdInh6QfEgyOuQlbCKk-IgNi7Zy
"""

import langchain

from langchain import hub
from langchain_community.document_loaders import WebBaseLoader
from langchain_community.vectorstores import FAISS
from langchain_groq import ChatGroq
from langchain_community.embeddings import HuggingFaceBgeEmbeddings
from langchain_core.output_parsers import StrOutputParser
from langchain.text_splitter import RecursiveCharacterTextSplitter

from dotenv import load_dotenv,find_dotenv

load_dotenv(find_dotenv())

import os

os.getenv("GROQ_API_KEY")

os.environ["GROQ_API_KEY"] =  os.getenv("GROQ_API_KEY")

import bs4

"""## Collection of data"""

loader = WebBaseLoader(
    web_paths=("https://lilianweng.github.io/posts/2023-06-23-agent/",),
    bs_kwargs=dict(
        #filter specific parts of the webpage, improving efficiency.
        parse_only=bs4.SoupStrainer(
            class_=("post-content", "post-title", "post-header")
        )
    ),
)

docs=loader.load()

docs[0].metadata

print(docs[0].page_content)

llm=ChatGroq(model="llama3-8b-8192")

model_name="BAAI/bge-small-en"

model_kwargs={"device": "cpu"}

encode_kwargs={"normalize_embeddings": True}

hf_embeddings=HuggingFaceBgeEmbeddings(
    model_name=model_name, model_kwargs=model_kwargs, encode_kwargs=encode_kwargs
)

docs[0].page_content

text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
splits = text_splitter.split_documents(docs)

len(splits)

splits = text_splitter.split_documents(docs)

vectorstore = FAISS.from_documents(documents=splits,embedding=hf_embeddings)

retriever=vectorstore.as_retriever()

len(docs[0].page_content)

prompt = hub.pull("rlm/rag-prompt")

import pprint

prompt.messages

pprint.pprint(prompt.messages)

prompt

def format_docs(docs):
    return "\n\n".join(doc.page_content for doc in docs)

from langchain_core.runnables import RunnablePassthrough

# Chain
rag_chain = (
    {"context": retriever | format_docs, "question": RunnablePassthrough()}
    | prompt
    | llm
    | StrOutputParser()
)

rag_chain.invoke("What is Task Decomposition?")

